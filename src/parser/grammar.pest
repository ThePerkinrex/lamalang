pub_kw = {"pub"}
fn_kw = {"fn"}
trait_kw = {"trait"}
struct_kw = {"struct"}
type_kw = {"type"}
impl_kw = {"impl"}
for_kw = {"for"}
mod_kw = {"mod"}
use_kw = {"use"}

path = _{path_part ~ ("::" ~ path_part)*}
	path_part = {(ASCII_ALPHANUMERIC | "_")+}
ident = {path}
	ident_part = {(ASCII_ALPHA | "_")~(ASCII_ALPHANUMERIC | "_")*}
type_name = @{ident_part}
generic_def_type = {type_name ~ ("<" ~ def_generics? ~ ">")?}
generic_type = {empty_type | (ident ~ ("<" ~ generics? ~ ">")?)}
	empty_type = {"()"}
trait_name = @{type_name}
generic_trait = {ident  ~ ("<" ~ generics? ~ ">")?}

def_generics = {ident ~ ("," ~ ident)* ~ ","?}
generics = {generic_type ~ ("," ~ generic_type)* ~ ","?}
where_clause = {"where" ~ (generic_bound ~ ("," ~ generic_bound)*) ~ ","?}
	generic_bound = {generic_type ~ ":" ~ generic_trait ~ ("+" ~ generic_trait)*}
fn_arguments = {(fn_arg ~ ("," ~ fn_arg)* ~ ","?)?}
	fn_arg = {ident ~ ":" ~ generic_type}
fn_return = {("->" ~ generic_type)?}
block = {"{" ~ non_returning_statement* ~ statement? ~ "}"}
	non_returning_statement = {expr ~ ";"}
	statement = {("return" ~ expr ~ ";"?) | expr}

item = _{fn_item | trait_item | struct_item | impl_trait_item | impl_item | mod_item | use_item}
	fn_item = {pub_kw? ~ fn_kw ~ ident_part ~ ("<" ~ def_generics? ~ ">")? ~ "(" ~ fn_arguments ~ ")" ~ fn_return ~ where_clause? ~ block}
	trait_item = {pub_kw? ~ trait_kw ~ trait_name ~ ("<" ~ def_generics? ~ ">")? ~ where_clause? ~ "{" ~ (trait_type | trait_fn)* ~ "}"}
		trait_type = {type_kw ~ generic_def_type ~ (":" ~ generic_trait ~ ("+" ~ generic_trait)*)? ~ ";"}
		trait_fn = {fn_kw ~ ident_part ~ ("<" ~ def_generics? ~ ">")? ~ "(" ~ fn_arguments ~ ")" ~ fn_return ~ where_clause? ~ (block | ";")}
	struct_item = {pub_kw? ~ struct_kw ~ type_name ~ ("<" ~ def_generics? ~ ">")? ~ where_clause? ~ "{" ~ fn_arguments ~ "}"}
	impl_trait_item = {impl_kw ~ ("<" ~ def_generics? ~ ">")? ~ generic_trait ~ for_kw ~ generic_type ~ where_clause? ~ "{" ~ (impl_type | impl_fn)* ~ "}"}
	impl_item = {impl_kw ~ ("<" ~ def_generics? ~ ">")? ~ generic_type ~ where_clause? ~ "{" ~ (impl_type | impl_fn)* ~ "}"}
		impl_type = {type_kw ~ generic_def_type ~ "=" ~ generic_type ~ ";"}
		impl_fn = {fn_kw ~ ident_part ~ ("<" ~ def_generics? ~ ">")? ~ "(" ~ fn_arguments ~ ")" ~ fn_return ~ where_clause? ~ block}
	mod_item = {pub_kw? ~ mod_kw ~ ident ~ ";"}
	use_item = {pub_kw? ~ use_kw ~ path ~ ";"}

module = _{SOI ~ (item)* ~ EOI}


value = { ident | if_statement | int | float | string }
	int = @{ inner_int ~ (^"e" ~ inner_int)?}
	float = @{ inner_int ~ "." ~ ASCII_DIGIT* ~ (^"e" ~ inner_int)? }
		inner_int = { ("+" | "-")? ~ ASCII_DIGIT+ }
	string = _{ "\"" ~ string_content ~ "\"" }
		string_content = @{("\\\"" | (!"\"" ~ ANY))*}
	if_statement = {"if" ~ expr ~ block ~ elseif_clause* ~ else_clause?}
		elseif_clause = {"else if" ~ expr ~ block}
		else_clause = {"else" ~ block}
		

operation = _{ add | subtract | multiply | divide | power }
	add      = { "+" }
	subtract = { "-" }
	multiply = { "*" }
	divide   = { "/" }
	power    = { "^" }
unary = {not}
	// negative = {"-"}
	not = {"!"}

expr = {(term ~ (operation ~ term)*)}
term = {unary* ~ ("(" ~ expr ~ ")" | value) ~ fn_call*}
	fn_call = { "(" ~ (expr ~ ("," ~ expr)* ~ ","?)? ~ ")"}

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE) }